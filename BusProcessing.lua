---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Roze.
--- DateTime: 2020-08-30 13:21
---


itemManagerAddress = "429823144AEF8331B86B00943C6576F9"

splitters = createLinkedList()

lastProcessedSplitter = nil

busses = {
    A = {
        name = "A",
        request = function(self, item, count, purpouse)
            rmessage("Send for " .. tostring(count) .. " " .. item .. " from A")
            scriptInfo.network:send(itemManagerAddress, 100, "order", item, count, self.name, purpouse)
        end,
        enabled = true,
        children = {}
    },
    B = {
        name = "B",
        request = function(self, item, count, purpouse)
            rmessage("Send for " .. tostring(count) .. " " .. item .. " from B")
            scriptInfo.network:send(itemManagerAddress, 100, "order", item, count, self.name, purpouse)
        end,
        enabled = true,
        children = {}
    },
}

sortedBusses = {
    busses.A,
    busses.B
}

table.sort(sortedBusses, function(a, b)
    return a.name < b.name
end)

function processOutputs()
    if lastProcessedSplitter == nil then
        lastProcessedSplitter = splitters.first
    end
    local j = 0
    while lastProcessedSplitter do
        processSplitterOutput(lastProcessedSplitter.value.object, lastProcessedSplitter.value.reference, lastProcessedSplitter.value.name)
        lastProcessedSplitter = lastProcessedSplitter.next
        j = j + 1
        if j == 4 then
            break
        end
    end
end

function processSplitterOutput(self, splitter, name)
    local item = splitter:getInput()
    if item then
        local itemName = item.type:getName()
        local q = self.queue.first
        if itemName == nil then
            rerror("nil itemName")
        end
        while q do
            if q.value.name == nil then
                rerror("nil q.value.name")
            end
            if q.value.name == itemName and (not name or name == q.value.bus) then -- name is only set for pullers going directly to stations, not bus -> local bus
                if splitter:canOutput(self.localOutput) and splitter:transferItem(self.localOutput) then -- check if possible to move
                    q.value.count = q.value.count - 1
                    if q.value.count == 0 then
                        q:delete()
                    end
                else
                    --print("Want but wait in splitter " .. splitter.nick)
                end
                return 1
            end
            q = q.next
        end
        if splitter:canOutput(self.busOutput) then -- busOutput = 1 in all current cases
            splitter:transferItem(self.busOutput)
            return 1
        else
            --print("Cant output in splitter " .. splitter.nick)
        end
    else
        --splitter:transferItem(self.busOutput)
        --print("No Item in splitter " .. splitter.nick)
    end
    return 0
end


function getBus(name, configuration)
    print("GetBus(" ..name .. ")")
    if not configuration then
        configuration = {
            busOutput = 1,
            localOutput = 0
        }
    end
    if busses[name] then
        return busses[name]
    else
        local bus = {
            name = name,
            parent = nil,
            isBus = true,
            queue = createLinkedList(),
            splitter = nil,
            localOutput = configuration.localOutput,
            busOutput = configuration.busOutput,
            request = function(self, item, count, purpouse)
                self.queue:push({
                    name = item,
                    count = count,
                })
                if self.parent then
                    rmessage("Send to parent " .. self.parent.name)
                    self.parent:request(item, count, purpouse)
                else
                    rwarning( "No parent for " .. self.name)
                end
            end
        }
        local _input = component.findComponent(name)
        if _input then
            for _,input in pairs(_input) do
                local splitter = component.proxy(input)
                local _space = explode(" ", splitter.nick)
                if _space[1] and _space[1] == name then
                    if _space[3] then
                        local _comma = explode(",", _space[3])
                        for _,v in pairs(_comma) do
                            local _equal = explode( "=", v)
                            if _equal[1] and _equal[2] then
                                if _equal[1] == "L" then
                                    bus.localOutput = tonumber(_equal[2])
                                elseif _equal[1] == "B" then
                                    bus.busOutput = tonumber(_equal[2])
                                end
                            end
                        end
                    end
                    if _space[1] and _space[2] then
                        local parent = getBus(_space[2])
                        if parent then
                            bus.parent = parent
                            if not bus.parent.children then
                                bus.parent.children = {}
                            end
                            table.insert(bus.parent.children, bus)
                        else
                            rerror("No parent found ".. _space[2])
                        end
                    else
                        rerror("No parent tag for splitter ".. _space[1])
                    end
                    --registerEvent(splitter, bus, function(self, evt, params, po)
                    --    processSplitterOutput(self, self.splitter)
                    --end)
                    print("Name: " .. name .. ", splitter: " .. tostring(splitter))
                    splitters:push({
                        reference = splitter,
                        object = bus,
                        instance = bus,
                        callback = function(self)
                            return processSplitterOutput(self, self.splitter, nil)
                        end
                    })
                    bus.splitter = splitter
                    --event.listen(splitter)
                    break
                end
            end
        end
        busses[name] = bus
        return bus
    end
end